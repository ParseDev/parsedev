<div class="w-full overflow-x-scroll">
  <% if result && !result.is_a?(String) &&result.added_context.is_a?(Hash) && result.added_context.key?(:code) %>
    <code class="bg-gray-800 text-white p-3 rounded-md whitespace-pre block">
      <%= result.added_context[:code].gsub(/(sk_live_)[a-zA-Z0-9]+/, '\1***********').strip.strip_heredoc %>
    </code>
  <% elsif result.is_a?(String) %>
    <%= result %>
  <% else %>
    <p> Oops, it seems like something went wrong </p>
  <% end %>
</div>


<%- if result.present? && result.answer.present? && result.answer.kind_of?(Array) %>
<div class="px-4 sm:px-6 lg:px-8">
  <div class="mt-8 flow-root">
    <div class="-mx-4 -my-2 overflow-x-auto sm:-mx-6 lg:-mx-8">
      <div class="inline-block min-w-full py-2 align-middle sm:px-6 lg:px-8">
      <canvas id="chartCanvas" class="hidden"></canvas>
      <div class="flex items-center py-4">
        <button id="createChartBtn" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded mr-2 cursor-pointer">
          Create Chart
        </button>
        
        <%= form_with model: Dataquery.new, url: dataqueries_path, method: :post, remote: true, data: {disabled_with: 'Saving ...'}, html: {data: {turbo: false}} do |form| %>
          <%= form.hidden_field :datasource_id, value: prompt.datasource_id %>
          <%= form.hidden_field :user_id, value: current_user.id %>
          <%= form.hidden_field :query, value: prompt.code %>
          <%= form.hidden_field :name, value: prompt.content %>
          <%= form.button 'Save', class: 'bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded cursor-pointer' %>
        <% end %>
      </div>

        <div class="overflow-hidden shadow ring-1 ring-black ring-opacity-5 sm:rounded-lg">
        
          <table class="min-w-full divide-y divide-gray-300 mt-2">
            <thead class="bg-gray-50">
              <tr>
              <%- result.answer[0].keys.each do |header| %>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900"><%=header %> </th>
              <% end %>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 bg-white">
            <%- result.answer.each do |res| %>
              <tr>
              <%- res.each do |k, v|%>
              <% begin %>
                <% if Time.iso8601(v) %>
                <% datetime = DateTime.parse(v) %>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"> <%= datetime.strftime("%A %B #{datetime.day.ordinalize} %Y") %> </td>
                <% end %>
              <% rescue %>
                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500"><%=v%></td>
              <% end %>
                <% end %>
              </tr>
            <% end %>

            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<% else %>
<div class="mt-10">
  <div class="p-3 rounded-md">
    Response
  </div>
 <pre class="bg-gray-800 text-white p-3 rounded-md whitespace-pre-line block">
  <code class="language-json">
    <% begin %>
      <%= eval(result.answer) %>
    <% rescue %>
      <%= result.answer %>
    <% end %>
  </code>
</pre>

</div>

<% end %>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
  // Handle the button click event
  document.getElementById('createChartBtn').addEventListener('click', function() {
    // Extract data from the table
    const table = document.querySelector('table');
    const labels = Array.from(table.querySelectorAll('tbody tr')).map(tr => tr.children[0].textContent);
    const datasets = Array.from(table.querySelectorAll('thead th')).slice(1).map((th, index) => {
      const data = Array.from(table.querySelectorAll('tbody tr')).map(tr => parseFloat(tr.children[index + 1].textContent));
      return {
        label: th.textContent,
        data: data,
        backgroundColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 0.2)`,
        borderColor: `rgba(${Math.random() * 255}, ${Math.random() * 255}, ${Math.random() * 255}, 1)`,
        borderWidth: 1
      };
    });

    // Create a chart using Chart.js
    const canvas = document.getElementById('chartCanvas');
    canvas.classList.remove('hidden');
    const ctx = canvas.getContext('2d');

    const chart = new Chart(ctx, {
      type: 'bar', // Change this to the desired chart type (e.g., 'line', 'pie', etc.)
      data: {
        labels: labels,
        datasets: datasets
      },
      options: {
        // Customize chart options as needed
        scales: {
          y: {
            beginAtZero: true,
            stacked: true // Enable stacking on the y-axis
          },
          x: {
            stacked: true // Enable stacking on the x-axis
          }
        }
      }
    });
  });
</script>